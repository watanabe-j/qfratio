// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Ap_int_cmE
SEXP Ap_int_cmE(const Eigen::MatrixXd A, const double p, const double thr_margin);
RcppExport SEXP _qfratio_Ap_int_cmE(SEXP ASEXP, SEXP pSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(Ap_int_cmE(A, p, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// Ap_int_nmE
SEXP Ap_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd mu, const double p, const double thr_margin);
RcppExport SEXP _qfratio_Ap_int_nmE(SEXP ASEXP, SEXP muSEXP, SEXP pSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(Ap_int_nmE(A, mu, p, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_cvE
SEXP ABpq_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double p, const double q, const double thr_margin);
RcppExport SEXP _qfratio_ABpq_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_cvE(LA, LB, p, q, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_cmE
SEXP ABpq_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double p, const double q, const double thr_margin);
RcppExport SEXP _qfratio_ABpq_int_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_cmE(A, LB, p, q, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_nvE
SEXP ABpq_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd mu, const double p, const double q);
RcppExport SEXP _qfratio_ABpq_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_nvE(LA, LB, mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_nmE
SEXP ABpq_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::ArrayXd mu, const double p, const double q);
RcppExport SEXP _qfratio_ABpq_int_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_nmE(A, LB, mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_cvE
SEXP ABDpqr_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double p, const double q, const double r, const double thr_margin);
RcppExport SEXP _qfratio_ABDpqr_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_cvE(LA, LB, LD, p, q, r, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_cmE
SEXP ABDpqr_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double p, const double q, const double r, const double thr_margin);
RcppExport SEXP _qfratio_ABDpqr_int_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_cmE(A, LB, D, p, q, r, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_nvE
SEXP ABDpqr_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const Eigen::ArrayXd mu, const double p, const double q, const double r);
RcppExport SEXP _qfratio_ABDpqr_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_nvE(LA, LB, LD, mu, p, q, r));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_nmE
SEXP ABDpqr_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const Eigen::ArrayXd mu, const double p, const double q, const double r);
RcppExport SEXP _qfratio_ABDpqr_int_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_nmE(A, LB, D, mu, p, q, r));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_int_cmE
SEXP ApIq_int_cmE(const Eigen::MatrixXd A, const double p, const double q, const double thr_margin);
RcppExport SEXP _qfratio_ApIq_int_cmE(SEXP ASEXP, SEXP pSEXP, SEXP qSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_int_cmE(A, p, q, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_int_nmE
SEXP ApIq_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd mu, const double p, const double q, const double thr_margin);
RcppExport SEXP _qfratio_ApIq_int_nmE(SEXP ASEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_int_nmE(A, mu, p, q, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_cvE
SEXP ApIq_npi_cvE(const Eigen::ArrayXd LA, const double bA, const double p, const double q, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApIq_npi_cvE(SEXP LASEXP, SEXP bASEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_cvE(LA, bA, p, q, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nvE
SEXP ApIq_npi_nvE(const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const double bA, const Eigen::VectorXd mu, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApIq_npi_nvE(SEXP LASEXP, SEXP UASEXP, SEXP bASEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nvE(LA, UA, bA, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_cvE
SEXP ApBq_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bB, const double p, const double q, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApBq_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_cvE(LA, LB, bB, p, q, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_cmE
SEXP ApBq_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double bB, const double p, const double q, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApBq_int_cmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_cmE(A, LA, UA, LB, bB, p, q, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_nvE
SEXP ApBq_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApBq_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_nvE(LA, LB, bB, mu, p, q, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_nmE
SEXP ApBq_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApBq_int_nmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_nmE(A, LA, UA, LB, bB, mu, p, q, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cvE
SEXP ApBq_npi_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cvE(LA, LB, bA, bB, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cmE
SEXP ApBq_npi_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cmE(A, LB, bA, bB, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nvE
SEXP ApBq_npi_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nvE(LA, LB, bA, bB, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nmE
SEXP ApBq_npi_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nmE(A, LB, bA, bB, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_cvE
SEXP ApBIqr_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bB, const double p, const double q, const double r, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApBIqr_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_cvE(LA, LB, bB, p, q, r, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_cmE
SEXP ApBIqr_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double bB, const double p, const double q, const double r, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApBIqr_int_cmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_cmE(A, LA, UA, LB, bB, p, q, r, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nvE
SEXP ApBIqr_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, bool error_bound, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nvE(LA, LB, bB, mu, p, q, r, m, error_bound, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nmE
SEXP ApBIqr_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, bool error_bound, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nmE(A, LA, UA, LB, bB, mu, p, q, r, m, error_bound, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cvE
SEXP ApBIqr_npi_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cvE(LA, LB, bA, bB, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cmE
SEXP ApBIqr_npi_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cmE(A, LB, bA, bB, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nvE
SEXP ApBIqr_npi_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nvE(LA, LB, bA, bB, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nmE
SEXP ApBIqr_npi_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nmE(A, LB, bA, bB, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cvE
SEXP IpBDqr_gen_cvE(const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_cvE(SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cvE(LB, LD, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cmE
SEXP IpBDqr_gen_cmE(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_cmE(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cmE(LB, D, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nvE
SEXP IpBDqr_gen_nvE(const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nvE(SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nvE(LB, LD, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nmE
SEXP IpBDqr_gen_nmE(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nmE(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nmE(LB, D, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cvE
SEXP ApBDqr_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cvE(LA, LB, LD, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cmE
SEXP ApBDqr_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cmE(A, LB, D, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nvE
SEXP ApBDqr_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nvE(LA, LB, LD, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nmE
SEXP ApBDqr_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nmE(A, LB, D, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cvE
SEXP ApBDqr_npi_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bA, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cvE(LA, LB, LD, bA, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cmE
SEXP ApBDqr_npi_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bA, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cmE(A, LB, D, bA, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nvE
SEXP ApBDqr_npi_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bA, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nvE(LA, LB, LD, bA, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nmE
SEXP ApBDqr_npi_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bA, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nmE(A, LB, D, bA, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nvEc
SEXP ApIq_npi_nvEc(const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const double bA, const Eigen::VectorXd mu, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApIq_npi_nvEc(SEXP LASEXP, SEXP UASEXP, SEXP bASEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nvEc(LA, UA, bA, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cvEc
SEXP ApBq_npi_cvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_cvEc(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cvEc(LA, LB, bA, bB, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cmEc
SEXP ApBq_npi_cmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_cmEc(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cmEc(A, LB, bA, bB, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nvEc
SEXP ApBq_npi_nvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_nvEc(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nvEc(LA, LB, bA, bB, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nmEc
SEXP ApBq_npi_nmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_nmEc(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nmEc(A, LB, bA, bB, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nvEc
SEXP ApBIqr_int_nvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, bool error_bound, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nvEc(SEXP LASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nvEc(LA, LB, bB, mu, p, q, r, m, error_bound, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nmEc
SEXP ApBIqr_int_nmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, bool error_bound, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nmEc(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nmEc(A, LA, UA, LB, bB, mu, p, q, r, m, error_bound, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cvEc
SEXP ApBIqr_npi_cvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_cvEc(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cvEc(LA, LB, bA, bB, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cmEc
SEXP ApBIqr_npi_cmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_cmEc(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cmEc(A, LB, bA, bB, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nvEc
SEXP ApBIqr_npi_nvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nvEc(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nvEc(LA, LB, bA, bB, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nmEc
SEXP ApBIqr_npi_nmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nmEc(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nmEc(A, LB, bA, bB, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cvEc
SEXP IpBDqr_gen_cvEc(const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_cvEc(SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cvEc(LB, LD, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cmEc
SEXP IpBDqr_gen_cmEc(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_cmEc(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cmEc(LB, D, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nvEc
SEXP IpBDqr_gen_nvEc(const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nvEc(SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nvEc(LB, LD, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nmEc
SEXP IpBDqr_gen_nmEc(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nmEc(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nmEc(LB, D, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cvEc
SEXP ApBDqr_int_cvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cvEc(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cvEc(LA, LB, LD, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cmEc
SEXP ApBDqr_int_cmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cmEc(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cmEc(A, LB, D, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nvEc
SEXP ApBDqr_int_nvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nvEc(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nvEc(LA, LB, LD, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nmEc
SEXP ApBDqr_int_nmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nmEc(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nmEc(A, LB, D, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cvEc
SEXP ApBDqr_npi_cvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bA, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cvEc(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cvEc(LA, LB, LD, bA, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cmEc
SEXP ApBDqr_npi_cmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bA, const double bB, const double bD, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cmEc(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cmEc(A, LB, D, bA, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nvEc
SEXP ApBDqr_npi_nvEc(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double bA, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nvEc(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nvEc(LA, LB, LD, bA, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nmEc
SEXP ApBDqr_npi_nmEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bA, const double bB, const double bD, const Eigen::ArrayXd mu, const double p, const double q, const double r, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nmEc(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nmEc(A, LB, D, bA, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nvEl
SEXP ApIq_npi_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> UA, const long double bA, const Eigen::Matrix<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApIq_npi_nvEl(SEXP LASEXP, SEXP UASEXP, SEXP bASEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nvEl(LA, UA, bA, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cvEl
SEXP ApBq_npi_cvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const long double p, const long double q, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_cvEl(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cvEl(LA, LB, bA, bB, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cmEl
SEXP ApBq_npi_cmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const long double p, const long double q, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_cmEl(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cmEl(A, LB, bA, bB, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nvEl
SEXP ApBq_npi_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_nvEl(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nvEl(LA, LB, bA, bB, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nmEl
SEXP ApBq_npi_nmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBq_npi_nmEl(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nmEl(A, LB, bA, bB, mu, p, q, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nvEl
SEXP ApBIqr_int_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, bool error_bound, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nvEl(SEXP LASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nvEl(LA, LB, bB, mu, p, q, r, m, error_bound, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nmEl
SEXP ApBIqr_int_nmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> UA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, bool error_bound, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nmEl(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nmEl(A, LA, UA, LB, bB, mu, p, q, r, m, error_bound, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cvEl
SEXP ApBIqr_npi_cvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_cvEl(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cvEl(LA, LB, bA, bB, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cmEl
SEXP ApBIqr_npi_cmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_cmEl(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cmEl(A, LB, bA, bB, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nvEl
SEXP ApBIqr_npi_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nvEl(SEXP LASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nvEl(LA, LB, bA, bB, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nmEl
SEXP ApBIqr_npi_nmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nmEl(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nmEl(A, LB, bA, bB, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cvEl
SEXP IpBDqr_gen_cvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Array<long double, Eigen::Dynamic, 1> LD, const long double bB, const long double bD, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_cvEl(SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cvEl(LB, LD, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cmEl
SEXP IpBDqr_gen_cmEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bB, const long double bD, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_cmEl(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cmEl(LB, D, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nvEl
SEXP IpBDqr_gen_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Array<long double, Eigen::Dynamic, 1> LD, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nvEl(SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nvEl(LB, LD, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nmEl
SEXP IpBDqr_gen_nmEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nmEl(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nmEl(LB, D, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cvEl
SEXP ApBDqr_int_cvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Array<long double, Eigen::Dynamic, 1> LD, const long double bB, const long double bD, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cvEl(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cvEl(LA, LB, LD, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cmEl
SEXP ApBDqr_int_cmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bB, const long double bD, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cmEl(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cmEl(A, LB, D, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nvEl
SEXP ApBDqr_int_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Array<long double, Eigen::Dynamic, 1> LD, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nvEl(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nvEl(LA, LB, LD, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nmEl
SEXP ApBDqr_int_nmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nmEl(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nmEl(A, LB, D, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cvEl
SEXP ApBDqr_npi_cvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Array<long double, Eigen::Dynamic, 1> LD, const long double bA, const long double bB, const long double bD, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cvEl(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cvEl(LA, LB, LD, bA, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cmEl
SEXP ApBDqr_npi_cmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bA, const long double bB, const long double bD, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cmEl(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cmEl(A, LB, D, bA, bB, bD, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nvEl
SEXP ApBDqr_npi_nvEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Array<long double, Eigen::Dynamic, 1> LD, const long double bA, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nvEl(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nvEl(LA, LB, LD, bA, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nmEl
SEXP ApBDqr_npi_nmEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bA, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p, const long double q, const long double r, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nmEl(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const long double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const long double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nmEl(A, LB, D, bA, bB, bD, mu, p, q, r, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// rqfpE
Eigen::ArrayXd rqfpE(const int nit, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::MatrixXd D, const double p, const double q, const double r, const Eigen::VectorXd mu, const Eigen::MatrixXd Sigma);
RcppExport SEXP _qfratio_rqfpE(SEXP nitSEXP, SEXP ASEXP, SEXP BSEXP, SEXP DSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rqfpE(nit, A, B, D, p, q, r, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qfratio_Ap_int_cmE", (DL_FUNC) &_qfratio_Ap_int_cmE, 3},
    {"_qfratio_Ap_int_nmE", (DL_FUNC) &_qfratio_Ap_int_nmE, 4},
    {"_qfratio_ABpq_int_cvE", (DL_FUNC) &_qfratio_ABpq_int_cvE, 5},
    {"_qfratio_ABpq_int_cmE", (DL_FUNC) &_qfratio_ABpq_int_cmE, 5},
    {"_qfratio_ABpq_int_nvE", (DL_FUNC) &_qfratio_ABpq_int_nvE, 5},
    {"_qfratio_ABpq_int_nmE", (DL_FUNC) &_qfratio_ABpq_int_nmE, 5},
    {"_qfratio_ABDpqr_int_cvE", (DL_FUNC) &_qfratio_ABDpqr_int_cvE, 7},
    {"_qfratio_ABDpqr_int_cmE", (DL_FUNC) &_qfratio_ABDpqr_int_cmE, 7},
    {"_qfratio_ABDpqr_int_nvE", (DL_FUNC) &_qfratio_ABDpqr_int_nvE, 7},
    {"_qfratio_ABDpqr_int_nmE", (DL_FUNC) &_qfratio_ABDpqr_int_nmE, 7},
    {"_qfratio_ApIq_int_cmE", (DL_FUNC) &_qfratio_ApIq_int_cmE, 4},
    {"_qfratio_ApIq_int_nmE", (DL_FUNC) &_qfratio_ApIq_int_nmE, 5},
    {"_qfratio_ApIq_npi_cvE", (DL_FUNC) &_qfratio_ApIq_npi_cvE, 7},
    {"_qfratio_ApIq_npi_nvE", (DL_FUNC) &_qfratio_ApIq_npi_nvE, 9},
    {"_qfratio_ApBq_int_cvE", (DL_FUNC) &_qfratio_ApBq_int_cvE, 8},
    {"_qfratio_ApBq_int_cmE", (DL_FUNC) &_qfratio_ApBq_int_cmE, 10},
    {"_qfratio_ApBq_int_nvE", (DL_FUNC) &_qfratio_ApBq_int_nvE, 9},
    {"_qfratio_ApBq_int_nmE", (DL_FUNC) &_qfratio_ApBq_int_nmE, 11},
    {"_qfratio_ApBq_npi_cvE", (DL_FUNC) &_qfratio_ApBq_npi_cvE, 9},
    {"_qfratio_ApBq_npi_cmE", (DL_FUNC) &_qfratio_ApBq_npi_cmE, 9},
    {"_qfratio_ApBq_npi_nvE", (DL_FUNC) &_qfratio_ApBq_npi_nvE, 10},
    {"_qfratio_ApBq_npi_nmE", (DL_FUNC) &_qfratio_ApBq_npi_nmE, 10},
    {"_qfratio_ApBIqr_int_cvE", (DL_FUNC) &_qfratio_ApBIqr_int_cvE, 9},
    {"_qfratio_ApBIqr_int_cmE", (DL_FUNC) &_qfratio_ApBIqr_int_cmE, 11},
    {"_qfratio_ApBIqr_int_nvE", (DL_FUNC) &_qfratio_ApBIqr_int_nvE, 11},
    {"_qfratio_ApBIqr_int_nmE", (DL_FUNC) &_qfratio_ApBIqr_int_nmE, 13},
    {"_qfratio_ApBIqr_npi_cvE", (DL_FUNC) &_qfratio_ApBIqr_npi_cvE, 10},
    {"_qfratio_ApBIqr_npi_cmE", (DL_FUNC) &_qfratio_ApBIqr_npi_cmE, 10},
    {"_qfratio_ApBIqr_npi_nvE", (DL_FUNC) &_qfratio_ApBIqr_npi_nvE, 11},
    {"_qfratio_ApBIqr_npi_nmE", (DL_FUNC) &_qfratio_ApBIqr_npi_nmE, 11},
    {"_qfratio_IpBDqr_gen_cvE", (DL_FUNC) &_qfratio_IpBDqr_gen_cvE, 10},
    {"_qfratio_IpBDqr_gen_cmE", (DL_FUNC) &_qfratio_IpBDqr_gen_cmE, 10},
    {"_qfratio_IpBDqr_gen_nvE", (DL_FUNC) &_qfratio_IpBDqr_gen_nvE, 11},
    {"_qfratio_IpBDqr_gen_nmE", (DL_FUNC) &_qfratio_IpBDqr_gen_nmE, 11},
    {"_qfratio_ApBDqr_int_cvE", (DL_FUNC) &_qfratio_ApBDqr_int_cvE, 11},
    {"_qfratio_ApBDqr_int_cmE", (DL_FUNC) &_qfratio_ApBDqr_int_cmE, 11},
    {"_qfratio_ApBDqr_int_nvE", (DL_FUNC) &_qfratio_ApBDqr_int_nvE, 12},
    {"_qfratio_ApBDqr_int_nmE", (DL_FUNC) &_qfratio_ApBDqr_int_nmE, 12},
    {"_qfratio_ApBDqr_npi_cvE", (DL_FUNC) &_qfratio_ApBDqr_npi_cvE, 12},
    {"_qfratio_ApBDqr_npi_cmE", (DL_FUNC) &_qfratio_ApBDqr_npi_cmE, 12},
    {"_qfratio_ApBDqr_npi_nvE", (DL_FUNC) &_qfratio_ApBDqr_npi_nvE, 13},
    {"_qfratio_ApBDqr_npi_nmE", (DL_FUNC) &_qfratio_ApBDqr_npi_nmE, 13},
    {"_qfratio_ApIq_npi_nvEc", (DL_FUNC) &_qfratio_ApIq_npi_nvEc, 9},
    {"_qfratio_ApBq_npi_cvEc", (DL_FUNC) &_qfratio_ApBq_npi_cvEc, 9},
    {"_qfratio_ApBq_npi_cmEc", (DL_FUNC) &_qfratio_ApBq_npi_cmEc, 9},
    {"_qfratio_ApBq_npi_nvEc", (DL_FUNC) &_qfratio_ApBq_npi_nvEc, 10},
    {"_qfratio_ApBq_npi_nmEc", (DL_FUNC) &_qfratio_ApBq_npi_nmEc, 10},
    {"_qfratio_ApBIqr_int_nvEc", (DL_FUNC) &_qfratio_ApBIqr_int_nvEc, 11},
    {"_qfratio_ApBIqr_int_nmEc", (DL_FUNC) &_qfratio_ApBIqr_int_nmEc, 13},
    {"_qfratio_ApBIqr_npi_cvEc", (DL_FUNC) &_qfratio_ApBIqr_npi_cvEc, 10},
    {"_qfratio_ApBIqr_npi_cmEc", (DL_FUNC) &_qfratio_ApBIqr_npi_cmEc, 10},
    {"_qfratio_ApBIqr_npi_nvEc", (DL_FUNC) &_qfratio_ApBIqr_npi_nvEc, 11},
    {"_qfratio_ApBIqr_npi_nmEc", (DL_FUNC) &_qfratio_ApBIqr_npi_nmEc, 11},
    {"_qfratio_IpBDqr_gen_cvEc", (DL_FUNC) &_qfratio_IpBDqr_gen_cvEc, 10},
    {"_qfratio_IpBDqr_gen_cmEc", (DL_FUNC) &_qfratio_IpBDqr_gen_cmEc, 10},
    {"_qfratio_IpBDqr_gen_nvEc", (DL_FUNC) &_qfratio_IpBDqr_gen_nvEc, 11},
    {"_qfratio_IpBDqr_gen_nmEc", (DL_FUNC) &_qfratio_IpBDqr_gen_nmEc, 11},
    {"_qfratio_ApBDqr_int_cvEc", (DL_FUNC) &_qfratio_ApBDqr_int_cvEc, 11},
    {"_qfratio_ApBDqr_int_cmEc", (DL_FUNC) &_qfratio_ApBDqr_int_cmEc, 11},
    {"_qfratio_ApBDqr_int_nvEc", (DL_FUNC) &_qfratio_ApBDqr_int_nvEc, 12},
    {"_qfratio_ApBDqr_int_nmEc", (DL_FUNC) &_qfratio_ApBDqr_int_nmEc, 12},
    {"_qfratio_ApBDqr_npi_cvEc", (DL_FUNC) &_qfratio_ApBDqr_npi_cvEc, 12},
    {"_qfratio_ApBDqr_npi_cmEc", (DL_FUNC) &_qfratio_ApBDqr_npi_cmEc, 12},
    {"_qfratio_ApBDqr_npi_nvEc", (DL_FUNC) &_qfratio_ApBDqr_npi_nvEc, 13},
    {"_qfratio_ApBDqr_npi_nmEc", (DL_FUNC) &_qfratio_ApBDqr_npi_nmEc, 13},
    {"_qfratio_ApIq_npi_nvEl", (DL_FUNC) &_qfratio_ApIq_npi_nvEl, 9},
    {"_qfratio_ApBq_npi_cvEl", (DL_FUNC) &_qfratio_ApBq_npi_cvEl, 9},
    {"_qfratio_ApBq_npi_cmEl", (DL_FUNC) &_qfratio_ApBq_npi_cmEl, 9},
    {"_qfratio_ApBq_npi_nvEl", (DL_FUNC) &_qfratio_ApBq_npi_nvEl, 10},
    {"_qfratio_ApBq_npi_nmEl", (DL_FUNC) &_qfratio_ApBq_npi_nmEl, 10},
    {"_qfratio_ApBIqr_int_nvEl", (DL_FUNC) &_qfratio_ApBIqr_int_nvEl, 11},
    {"_qfratio_ApBIqr_int_nmEl", (DL_FUNC) &_qfratio_ApBIqr_int_nmEl, 13},
    {"_qfratio_ApBIqr_npi_cvEl", (DL_FUNC) &_qfratio_ApBIqr_npi_cvEl, 10},
    {"_qfratio_ApBIqr_npi_cmEl", (DL_FUNC) &_qfratio_ApBIqr_npi_cmEl, 10},
    {"_qfratio_ApBIqr_npi_nvEl", (DL_FUNC) &_qfratio_ApBIqr_npi_nvEl, 11},
    {"_qfratio_ApBIqr_npi_nmEl", (DL_FUNC) &_qfratio_ApBIqr_npi_nmEl, 11},
    {"_qfratio_IpBDqr_gen_cvEl", (DL_FUNC) &_qfratio_IpBDqr_gen_cvEl, 10},
    {"_qfratio_IpBDqr_gen_cmEl", (DL_FUNC) &_qfratio_IpBDqr_gen_cmEl, 10},
    {"_qfratio_IpBDqr_gen_nvEl", (DL_FUNC) &_qfratio_IpBDqr_gen_nvEl, 11},
    {"_qfratio_IpBDqr_gen_nmEl", (DL_FUNC) &_qfratio_IpBDqr_gen_nmEl, 11},
    {"_qfratio_ApBDqr_int_cvEl", (DL_FUNC) &_qfratio_ApBDqr_int_cvEl, 11},
    {"_qfratio_ApBDqr_int_cmEl", (DL_FUNC) &_qfratio_ApBDqr_int_cmEl, 11},
    {"_qfratio_ApBDqr_int_nvEl", (DL_FUNC) &_qfratio_ApBDqr_int_nvEl, 12},
    {"_qfratio_ApBDqr_int_nmEl", (DL_FUNC) &_qfratio_ApBDqr_int_nmEl, 12},
    {"_qfratio_ApBDqr_npi_cvEl", (DL_FUNC) &_qfratio_ApBDqr_npi_cvEl, 12},
    {"_qfratio_ApBDqr_npi_cmEl", (DL_FUNC) &_qfratio_ApBDqr_npi_cmEl, 12},
    {"_qfratio_ApBDqr_npi_nvEl", (DL_FUNC) &_qfratio_ApBDqr_npi_nvEl, 13},
    {"_qfratio_ApBDqr_npi_nmEl", (DL_FUNC) &_qfratio_ApBDqr_npi_nmEl, 13},
    {"_qfratio_rqfpE", (DL_FUNC) &_qfratio_rqfpE, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_qfratio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
