// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// p_A1B1_Ed
SEXP p_A1B1_Ed(const double quantile, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::ArrayXd mu, const Eigen::Index m, const bool stop_on_error, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_p_A1B1_Ed(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP mSEXP, SEXP stop_on_errorSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(p_A1B1_Ed(quantile, A, B, mu, m, stop_on_error, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// p_A1B1_El
SEXP p_A1B1_El(const long double quantile, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> B, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const Eigen::Index m, const bool stop_on_error, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_p_A1B1_El(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP mSEXP, SEXP stop_on_errorSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(p_A1B1_El(quantile, A, B, mu, m, stop_on_error, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// p_A1B1_Ec
SEXP p_A1B1_Ec(const double quantile, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::ArrayXd mu, const Eigen::Index m, const bool stop_on_error, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_p_A1B1_Ec(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP mSEXP, SEXP stop_on_errorSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(p_A1B1_Ec(quantile, A, B, mu, m, stop_on_error, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// d_A1I1_Ed
SEXP d_A1I1_Ed(const double quantile, const Eigen::ArrayXd LA, const Eigen::Index m, const double thr_margin);
RcppExport SEXP _qfratio_d_A1I1_Ed(SEXP quantileSEXP, SEXP LASEXP, SEXP mSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(d_A1I1_Ed(quantile, LA, m, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// p_imhof_Ed
SEXP p_imhof_Ed(const double quantile, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::ArrayXd mu, double autoscale_args, bool stop_on_error, double tol_zero, double epsabs, double epsrel, int limit);
RcppExport SEXP _qfratio_p_imhof_Ed(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP autoscale_argsSEXP, SEXP stop_on_errorSEXP, SEXP tol_zeroSEXP, SEXP epsabsSEXP, SEXP epsrelSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type autoscale_args(autoscale_argsSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< double >::type tol_zero(tol_zeroSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    Rcpp::traits::input_parameter< double >::type epsrel(epsrelSEXP);
    Rcpp::traits::input_parameter< int >::type limit(limitSEXP);
    rcpp_result_gen = Rcpp::wrap(p_imhof_Ed(quantile, A, B, mu, autoscale_args, stop_on_error, tol_zero, epsabs, epsrel, limit));
    return rcpp_result_gen;
END_RCPP
}
// d_broda_Ed
SEXP d_broda_Ed(const double quantile, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::ArrayXd mu, double autoscale_args, bool stop_on_error, double tol_zero, double epsabs, double epsrel, int limit);
RcppExport SEXP _qfratio_d_broda_Ed(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP autoscale_argsSEXP, SEXP stop_on_errorSEXP, SEXP tol_zeroSEXP, SEXP epsabsSEXP, SEXP epsrelSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type autoscale_args(autoscale_argsSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< double >::type tol_zero(tol_zeroSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    Rcpp::traits::input_parameter< double >::type epsrel(epsrelSEXP);
    Rcpp::traits::input_parameter< int >::type limit(limitSEXP);
    rcpp_result_gen = Rcpp::wrap(d_broda_Ed(quantile, A, B, mu, autoscale_args, stop_on_error, tol_zero, epsabs, epsrel, limit));
    return rcpp_result_gen;
END_RCPP
}
// d_butler_Ed
SEXP d_butler_Ed(const double quantile, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::ArrayXd mu, int order_spa, bool stop_on_error, double tol_zero, double epsabs, double epsrel, int maxiter);
RcppExport SEXP _qfratio_d_butler_Ed(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP order_spaSEXP, SEXP stop_on_errorSEXP, SEXP tol_zeroSEXP, SEXP epsabsSEXP, SEXP epsrelSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type order_spa(order_spaSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< double >::type tol_zero(tol_zeroSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    Rcpp::traits::input_parameter< double >::type epsrel(epsrelSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(d_butler_Ed(quantile, A, B, mu, order_spa, stop_on_error, tol_zero, epsabs, epsrel, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// p_butler_Ed
SEXP p_butler_Ed(const double quantile, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::ArrayXd mu, int order_spa, bool stop_on_error, double tol_zero, double epsabs, double epsrel, int maxiter);
RcppExport SEXP _qfratio_p_butler_Ed(SEXP quantileSEXP, SEXP ASEXP, SEXP BSEXP, SEXP muSEXP, SEXP order_spaSEXP, SEXP stop_on_errorSEXP, SEXP tol_zeroSEXP, SEXP epsabsSEXP, SEXP epsrelSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type order_spa(order_spaSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_on_error(stop_on_errorSEXP);
    Rcpp::traits::input_parameter< double >::type tol_zero(tol_zeroSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    Rcpp::traits::input_parameter< double >::type epsrel(epsrelSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(p_butler_Ed(quantile, A, B, mu, order_spa, stop_on_error, tol_zero, epsabs, epsrel, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Ap_int_E
SEXP Ap_int_E(const Eigen::MatrixXd A, const Eigen::ArrayXd mu, const double p_, const double thr_margin, const double tol_zero);
RcppExport SEXP _qfratio_Ap_int_E(SEXP ASEXP, SEXP muSEXP, SEXP p_SEXP, SEXP thr_marginSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(Ap_int_E(A, mu, p_, thr_margin, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_E
SEXP ABpq_int_E(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::ArrayXd mu, const double p_, const double q_, const double thr_margin, const double tol_zero);
RcppExport SEXP _qfratio_ABpq_int_E(SEXP ASEXP, SEXP LBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP thr_marginSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_E(A, LB, mu, p_, q_, thr_margin, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_E
SEXP ABDpqr_int_E(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const double thr_margin, const double tol_zero);
RcppExport SEXP _qfratio_ABDpqr_int_E(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP thr_marginSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_E(A, LB, D, mu, p_, q_, r_, thr_margin, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_int_cE
SEXP ApIq_int_cE(const Eigen::MatrixXd A, const double p_, const double q_, const double thr_margin);
RcppExport SEXP _qfratio_ApIq_int_cE(SEXP ASEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_int_cE(A, p_, q_, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_int_nE
SEXP ApIq_int_nE(const Eigen::MatrixXd A, const Eigen::ArrayXd mu, const double p_, const double q_, const double thr_margin);
RcppExport SEXP _qfratio_ApIq_int_nE(SEXP ASEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_int_nE(A, mu, p_, q_, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_cE
SEXP ApIq_npi_cE(const Eigen::ArrayXd LA, const double bA, const double p_, const double q_, const Eigen::Index m, bool error_bound, const double thr_margin);
RcppExport SEXP _qfratio_ApIq_npi_cE(SEXP LASEXP, SEXP bASEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_cE(LA, bA, p_, q_, m, error_bound, thr_margin));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nEd
SEXP ApIq_npi_nEd(const Eigen::ArrayXd LA, const double bA, const Eigen::ArrayXd mu, const double p_, const double q_, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApIq_npi_nEd(SEXP LASEXP, SEXP bASEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nEd(LA, bA, mu, p_, q_, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_E
SEXP ApBq_int_E(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const Eigen::Index m, bool error_bound, const double thr_margin, const double tol_zero);
RcppExport SEXP _qfratio_ApBq_int_E(SEXP ASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_E(A, LB, bB, mu, p_, q_, m, error_bound, thr_margin, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_Ed
SEXP ApBq_npi_Ed(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBq_npi_Ed(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_Ed(A, LB, bA, bB, mu, p_, q_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_cEd
SEXP ApBIqr_int_cEd(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bB, const double p_, const double q_, const double r_, const Eigen::Index m, bool error_bound, const double thr_margin, const double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_int_cEd(SEXP ASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_cEd(A, LB, bB, p_, q_, r_, m, error_bound, thr_margin, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nEd
SEXP ApBIqr_int_nEd(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, bool error_bound, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_int_nEd(SEXP ASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nEd(A, LB, bB, mu, p_, q_, r_, m, error_bound, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_Ed
SEXP ApBIqr_npi_Ed(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_npi_Ed(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_Ed(A, LB, bA, bB, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_Ed
SEXP IpBDqr_gen_Ed(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_IpBDqr_gen_Ed(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_Ed(LB, D, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_Ed
SEXP ApBDqr_int_Ed(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBDqr_int_Ed(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_Ed(A, LB, D, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_Ed
SEXP ApBDqr_npi_Ed(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bA, const double bB, const double bD, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBDqr_npi_Ed(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_Ed(A, LB, D, bA, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nEc
SEXP ApIq_npi_nEc(const Eigen::ArrayXd LA, const double bA, const Eigen::ArrayXd mu, const double p_, const double q_, const Eigen::Index m, const double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApIq_npi_nEc(SEXP LASEXP, SEXP bASEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nEc(LA, bA, mu, p_, q_, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_Ec
SEXP ApBq_npi_Ec(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBq_npi_Ec(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_Ec(A, LB, bA, bB, mu, p_, q_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nEc
SEXP ApBIqr_int_nEc(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, bool error_bound, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_int_nEc(SEXP ASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nEc(A, LB, bB, mu, p_, q_, r_, m, error_bound, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_Ec
SEXP ApBIqr_npi_Ec(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double bA, const double bB, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_npi_Ec(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_Ec(A, LB, bA, bB, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_Ec
SEXP IpBDqr_gen_Ec(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_IpBDqr_gen_Ec(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_Ec(LB, D, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_Ec
SEXP ApBDqr_int_Ec(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bB, const double bD, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBDqr_int_Ec(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_Ec(A, LB, D, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_Ec
SEXP ApBDqr_npi_Ec(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double bA, const double bB, const double bD, const Eigen::ArrayXd mu, const double p_, const double q_, const double r_, const Eigen::Index m, const double thr_margin, int nthreads, const double tol_zero);
RcppExport SEXP _qfratio_ApBDqr_npi_Ec(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_Ec(A, LB, D, bA, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nEl
SEXP ApIq_npi_nEl(const Eigen::Array<long double, Eigen::Dynamic, 1> LA, const long double bA, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const Eigen::Index m, const long double thr_margin, int nthreads);
RcppExport SEXP _qfratio_ApIq_npi_nEl(SEXP LASEXP, SEXP bASEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nEl(LA, bA, mu, p_, q_, m, thr_margin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_El
SEXP ApBq_npi_El(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const Eigen::Index m, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_ApBq_npi_El(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_El(A, LB, bA, bB, mu, p_, q_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nEl
SEXP ApBIqr_int_nEl(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const long double r_, const Eigen::Index m, bool error_bound, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_int_nEl(SEXP ASEXP, SEXP LBSEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const long double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nEl(A, LB, bB, mu, p_, q_, r_, m, error_bound, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_El
SEXP ApBIqr_npi_El(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const long double bA, const long double bB, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const long double r_, const Eigen::Index m, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_ApBIqr_npi_El(SEXP ASEXP, SEXP LBSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const long double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_El(A, LB, bA, bB, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_El
SEXP IpBDqr_gen_El(const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const long double r_, const Eigen::Index m, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_IpBDqr_gen_El(SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const long double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_El(LB, D, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_El
SEXP ApBDqr_int_El(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const long double r_, const Eigen::Index m, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_ApBDqr_int_El(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const long double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_El(A, LB, D, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_El
SEXP ApBDqr_npi_El(const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> A, const Eigen::Array<long double, Eigen::Dynamic, 1> LB, const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> D, const long double bA, const long double bB, const long double bD, const Eigen::Array<long double, Eigen::Dynamic, 1> mu, const long double p_, const long double q_, const long double r_, const Eigen::Index m, const long double thr_margin, int nthreads, const long double tol_zero);
RcppExport SEXP _qfratio_ApBDqr_npi_El(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP bASEXP, SEXP bBSEXP, SEXP bDSEXP, SEXP muSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP mSEXP, SEXP thr_marginSEXP, SEXP nthreadsSEXP, SEXP tol_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<long double, Eigen::Dynamic, Eigen::Dynamic> >::type D(DSEXP);
    Rcpp::traits::input_parameter< const long double >::type bA(bASEXP);
    Rcpp::traits::input_parameter< const long double >::type bB(bBSEXP);
    Rcpp::traits::input_parameter< const long double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Array<long double, Eigen::Dynamic, 1> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const long double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const long double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const long double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type m(mSEXP);
    Rcpp::traits::input_parameter< const long double >::type thr_margin(thr_marginSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tol_zero(tol_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_El(A, LB, D, bA, bB, bD, mu, p_, q_, r_, m, thr_margin, nthreads, tol_zero));
    return rcpp_result_gen;
END_RCPP
}
// rqfpE
Eigen::ArrayXd rqfpE(const int nit, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::MatrixXd D, const double p_, const double q_, const double r_, const Eigen::VectorXd mu, const Eigen::MatrixXd Sigma);
RcppExport SEXP _qfratio_rqfpE(SEXP nitSEXP, SEXP ASEXP, SEXP BSEXP, SEXP DSEXP, SEXP p_SEXP, SEXP q_SEXP, SEXP r_SEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< const double >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< const double >::type r_(r_SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rqfpE(nit, A, B, D, p_, q_, r_, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qfratio_p_A1B1_Ed", (DL_FUNC) &_qfratio_p_A1B1_Ed, 9},
    {"_qfratio_p_A1B1_El", (DL_FUNC) &_qfratio_p_A1B1_El, 9},
    {"_qfratio_p_A1B1_Ec", (DL_FUNC) &_qfratio_p_A1B1_Ec, 9},
    {"_qfratio_d_A1I1_Ed", (DL_FUNC) &_qfratio_d_A1I1_Ed, 4},
    {"_qfratio_p_imhof_Ed", (DL_FUNC) &_qfratio_p_imhof_Ed, 10},
    {"_qfratio_d_broda_Ed", (DL_FUNC) &_qfratio_d_broda_Ed, 10},
    {"_qfratio_d_butler_Ed", (DL_FUNC) &_qfratio_d_butler_Ed, 10},
    {"_qfratio_p_butler_Ed", (DL_FUNC) &_qfratio_p_butler_Ed, 10},
    {"_qfratio_Ap_int_E", (DL_FUNC) &_qfratio_Ap_int_E, 5},
    {"_qfratio_ABpq_int_E", (DL_FUNC) &_qfratio_ABpq_int_E, 7},
    {"_qfratio_ABDpqr_int_E", (DL_FUNC) &_qfratio_ABDpqr_int_E, 9},
    {"_qfratio_ApIq_int_cE", (DL_FUNC) &_qfratio_ApIq_int_cE, 4},
    {"_qfratio_ApIq_int_nE", (DL_FUNC) &_qfratio_ApIq_int_nE, 5},
    {"_qfratio_ApIq_npi_cE", (DL_FUNC) &_qfratio_ApIq_npi_cE, 7},
    {"_qfratio_ApIq_npi_nEd", (DL_FUNC) &_qfratio_ApIq_npi_nEd, 8},
    {"_qfratio_ApBq_int_E", (DL_FUNC) &_qfratio_ApBq_int_E, 10},
    {"_qfratio_ApBq_npi_Ed", (DL_FUNC) &_qfratio_ApBq_npi_Ed, 11},
    {"_qfratio_ApBIqr_int_cEd", (DL_FUNC) &_qfratio_ApBIqr_int_cEd, 10},
    {"_qfratio_ApBIqr_int_nEd", (DL_FUNC) &_qfratio_ApBIqr_int_nEd, 12},
    {"_qfratio_ApBIqr_npi_Ed", (DL_FUNC) &_qfratio_ApBIqr_npi_Ed, 12},
    {"_qfratio_IpBDqr_gen_Ed", (DL_FUNC) &_qfratio_IpBDqr_gen_Ed, 12},
    {"_qfratio_ApBDqr_int_Ed", (DL_FUNC) &_qfratio_ApBDqr_int_Ed, 13},
    {"_qfratio_ApBDqr_npi_Ed", (DL_FUNC) &_qfratio_ApBDqr_npi_Ed, 14},
    {"_qfratio_ApIq_npi_nEc", (DL_FUNC) &_qfratio_ApIq_npi_nEc, 8},
    {"_qfratio_ApBq_npi_Ec", (DL_FUNC) &_qfratio_ApBq_npi_Ec, 11},
    {"_qfratio_ApBIqr_int_nEc", (DL_FUNC) &_qfratio_ApBIqr_int_nEc, 12},
    {"_qfratio_ApBIqr_npi_Ec", (DL_FUNC) &_qfratio_ApBIqr_npi_Ec, 12},
    {"_qfratio_IpBDqr_gen_Ec", (DL_FUNC) &_qfratio_IpBDqr_gen_Ec, 12},
    {"_qfratio_ApBDqr_int_Ec", (DL_FUNC) &_qfratio_ApBDqr_int_Ec, 13},
    {"_qfratio_ApBDqr_npi_Ec", (DL_FUNC) &_qfratio_ApBDqr_npi_Ec, 14},
    {"_qfratio_ApIq_npi_nEl", (DL_FUNC) &_qfratio_ApIq_npi_nEl, 8},
    {"_qfratio_ApBq_npi_El", (DL_FUNC) &_qfratio_ApBq_npi_El, 11},
    {"_qfratio_ApBIqr_int_nEl", (DL_FUNC) &_qfratio_ApBIqr_int_nEl, 12},
    {"_qfratio_ApBIqr_npi_El", (DL_FUNC) &_qfratio_ApBIqr_npi_El, 12},
    {"_qfratio_IpBDqr_gen_El", (DL_FUNC) &_qfratio_IpBDqr_gen_El, 12},
    {"_qfratio_ApBDqr_int_El", (DL_FUNC) &_qfratio_ApBDqr_int_El, 13},
    {"_qfratio_ApBDqr_npi_El", (DL_FUNC) &_qfratio_ApBDqr_npi_El, 14},
    {"_qfratio_rqfpE", (DL_FUNC) &_qfratio_rqfpE, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_qfratio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
