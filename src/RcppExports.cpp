// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Ap_int_cmE
SEXP Ap_int_cmE(const Eigen::MatrixXd A, const double p);
RcppExport SEXP _qfratio_Ap_int_cmE(SEXP ASEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Ap_int_cmE(A, p));
    return rcpp_result_gen;
END_RCPP
}
// Ap_int_nmE
SEXP Ap_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd mu, const double p);
RcppExport SEXP _qfratio_Ap_int_nmE(SEXP ASEXP, SEXP muSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Ap_int_nmE(A, mu, p));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_cvE
SEXP ABpq_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double p, const double q);
RcppExport SEXP _qfratio_ABpq_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_cvE(LA, LB, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_cmE
SEXP ABpq_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double p, const double q);
RcppExport SEXP _qfratio_ABpq_int_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_cmE(A, LB, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_nvE
SEXP ABpq_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd mu, const double p, const double q);
RcppExport SEXP _qfratio_ABpq_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_nvE(LA, LB, mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ABpq_int_nmE
SEXP ABpq_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::ArrayXd mu, const double p, const double q);
RcppExport SEXP _qfratio_ABpq_int_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ABpq_int_nmE(A, LB, mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_cvE
SEXP ABDpqr_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double p, const double q, const double r);
RcppExport SEXP _qfratio_ABDpqr_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_cvE(LA, LB, LD, p, q, r));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_cmE
SEXP ABDpqr_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double p, const double q, const double r, int nthreads);
RcppExport SEXP _qfratio_ABDpqr_int_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_cmE(A, LB, D, p, q, r, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_nvE
SEXP ABDpqr_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const Eigen::ArrayXd mu, const double p, const double q, const double r);
RcppExport SEXP _qfratio_ABDpqr_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_nvE(LA, LB, LD, mu, p, q, r));
    return rcpp_result_gen;
END_RCPP
}
// ABDpqr_int_nmE
SEXP ABDpqr_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const Eigen::ArrayXd mu, const double p, const double q, const double r);
RcppExport SEXP _qfratio_ABDpqr_int_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ABDpqr_int_nmE(A, LB, D, mu, p, q, r));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_int_cmE
SEXP ApIq_int_cmE(const Eigen::MatrixXd A, const double p, const double q);
RcppExport SEXP _qfratio_ApIq_int_cmE(SEXP ASEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_int_cmE(A, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_int_nmE
SEXP ApIq_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd mu, const double p, const double q);
RcppExport SEXP _qfratio_ApIq_int_nmE(SEXP ASEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_int_nmE(A, mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_cvE
SEXP ApIq_npi_cvE(const Eigen::ArrayXd LA, const double b1, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApIq_npi_cvE(SEXP LASEXP, SEXP b1SEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_cvE(LA, b1, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApIq_npi_nvE
SEXP ApIq_npi_nvE(const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const double b1, const Eigen::VectorXd mu, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApIq_npi_nvE(SEXP LASEXP, SEXP UASEXP, SEXP b1SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApIq_npi_nvE(LA, UA, b1, mu, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_cvE
SEXP ApBq_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b2, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_cvE(LA, LB, b2, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_cmE
SEXP ApBq_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double b2, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_int_cmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_cmE(A, LA, UA, LB, b2, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_nvE
SEXP ApBq_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_nvE(LA, LB, b2, mu, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_int_nmE
SEXP ApBq_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_int_nmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_int_nmE(A, LA, UA, LB, b2, mu, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cvE
SEXP ApBq_npi_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b1, const double b2, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_npi_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cvE(LA, LB, b1, b2, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_cmE
SEXP ApBq_npi_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double b1, const double b2, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_npi_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_cmE(A, LB, b1, b2, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nvE
SEXP ApBq_npi_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b1, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_npi_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nvE(LA, LB, b1, b2, mu, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBq_npi_nmE
SEXP ApBq_npi_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double b1, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBq_npi_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBq_npi_nmE(A, LB, b1, b2, mu, p, q, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_cvE
SEXP ApBIqr_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b2, const double p, const double q, const double r, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBIqr_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_cvE(LA, LB, b2, p, q, r, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_cmE
SEXP ApBIqr_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double b2, const double p, const double q, const double r, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBIqr_int_cmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_cmE(A, LA, UA, LB, b2, p, q, r, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nvE
SEXP ApBIqr_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m, bool error_bound);
RcppExport SEXP _qfratio_ApBIqr_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nvE(LA, LB, b2, mu, p, q, r, m, error_bound));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_int_nmE
SEXP ApBIqr_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LA, const Eigen::MatrixXd UA, const Eigen::ArrayXd LB, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m, bool error_bound, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_int_nmE(SEXP ASEXP, SEXP LASEXP, SEXP UASEXP, SEXP LBSEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP error_boundSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type UA(UASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type error_bound(error_boundSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_int_nmE(A, LA, UA, LB, b2, mu, p, q, r, m, error_bound, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cvE
SEXP ApBIqr_npi_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b1, const double b2, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBIqr_npi_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cvE(LA, LB, b1, b2, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_cmE
SEXP ApBIqr_npi_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double b1, const double b2, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBIqr_npi_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_cmE(A, LB, b1, b2, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nvE
SEXP ApBIqr_npi_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const double b1, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBIqr_npi_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nvE(LA, LB, b1, b2, mu, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBIqr_npi_nmE
SEXP ApBIqr_npi_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const double b1, const double b2, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m, int nthreads);
RcppExport SEXP _qfratio_ApBIqr_npi_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBIqr_npi_nmE(A, LB, b1, b2, mu, p, q, r, m, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cvE
SEXP IpBDqr_gen_cvE(const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double b2, const double b3, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_IpBDqr_gen_cvE(SEXP LBSEXP, SEXP LDSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cvE(LB, LD, b2, b3, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_cmE
SEXP IpBDqr_gen_cmE(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double b2, const double b3, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_IpBDqr_gen_cmE(SEXP LBSEXP, SEXP DSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_cmE(LB, D, b2, b3, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nvE
SEXP IpBDqr_gen_nvE(const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double b2, const double b3, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_IpBDqr_gen_nvE(SEXP LBSEXP, SEXP LDSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nvE(LB, LD, b2, b3, mu, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// IpBDqr_gen_nmE
SEXP IpBDqr_gen_nmE(const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double b2, const double b3, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m, int nthreads);
RcppExport SEXP _qfratio_IpBDqr_gen_nmE(SEXP LBSEXP, SEXP DSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(IpBDqr_gen_nmE(LB, D, b2, b3, mu, p, q, r, m, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cvE
SEXP ApBDqr_int_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double b2, const double b3, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBDqr_int_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cvE(LA, LB, LD, b2, b3, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_cmE
SEXP ApBDqr_int_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double b2, const double b3, const double p, const double q, const double r, const int m, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_cmE(A, LB, D, b2, b3, p, q, r, m, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nvE
SEXP ApBDqr_int_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double b2, const double b3, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBDqr_int_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nvE(LA, LB, LD, b2, b3, mu, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_int_nmE
SEXP ApBDqr_int_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double b2, const double b3, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_int_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_int_nmE(A, LB, D, b2, b3, mu, p, q, r, m, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cvE
SEXP ApBDqr_npi_cvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double b1, const double b2, const double b3, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBDqr_npi_cvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cvE(LA, LB, LD, b1, b2, b3, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_cmE
SEXP ApBDqr_npi_cmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double b1, const double b2, const double b3, const double p, const double q, const double r, const int m, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_cmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_cmE(A, LB, D, b1, b2, b3, p, q, r, m, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nvE
SEXP ApBDqr_npi_nvE(const Eigen::ArrayXd LA, const Eigen::ArrayXd LB, const Eigen::ArrayXd LD, const double b1, const double b2, const double b3, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m);
RcppExport SEXP _qfratio_ApBDqr_npi_nvE(SEXP LASEXP, SEXP LBSEXP, SEXP LDSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LA(LASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nvE(LA, LB, LD, b1, b2, b3, mu, p, q, r, m));
    return rcpp_result_gen;
END_RCPP
}
// ApBDqr_npi_nmE
SEXP ApBDqr_npi_nmE(const Eigen::MatrixXd A, const Eigen::ArrayXd LB, const Eigen::MatrixXd D, const double b1, const double b2, const double b3, const Eigen::ArrayXd mu, const double p, const double q, const double r, const int m, int nthreads);
RcppExport SEXP _qfratio_ApBDqr_npi_nmE(SEXP ASEXP, SEXP LBSEXP, SEXP DSEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP mSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type LB(LBSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< const double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ApBDqr_npi_nmE(A, LB, D, b1, b2, b3, mu, p, q, r, m, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// rmvnE
Eigen::MatrixXd rmvnE(const int N, const Eigen::VectorXd& mu, const Eigen::MatrixXd& Sigma);
RcppExport SEXP _qfratio_rmvnE(SEXP NSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnE(N, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// rqfrE
Eigen::ArrayXd rqfrE(const int nit, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const double p, const double q, const Eigen::VectorXd mu, const Eigen::MatrixXd Sigma);
RcppExport SEXP _qfratio_rqfrE(SEXP nitSEXP, SEXP ASEXP, SEXP BSEXP, SEXP pSEXP, SEXP qSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rqfrE(nit, A, B, p, q, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// rqfmrE
Eigen::ArrayXd rqfmrE(const int nit, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::MatrixXd D, const double p, const double q, const double r, const Eigen::VectorXd mu, const Eigen::MatrixXd Sigma);
RcppExport SEXP _qfratio_rqfmrE(SEXP nitSEXP, SEXP ASEXP, SEXP BSEXP, SEXP DSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rqfmrE(nit, A, B, D, p, q, r, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// rqfpE
Eigen::ArrayXd rqfpE(const int nit, const Eigen::MatrixXd A, const Eigen::MatrixXd B, const Eigen::MatrixXd D, const double p, const double q, const double r, const Eigen::VectorXd mu, const Eigen::MatrixXd Sigma);
RcppExport SEXP _qfratio_rqfpE(SEXP nitSEXP, SEXP ASEXP, SEXP BSEXP, SEXP DSEXP, SEXP pSEXP, SEXP qSEXP, SEXP rSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rqfpE(nit, A, B, D, p, q, r, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qfratio_Ap_int_cmE", (DL_FUNC) &_qfratio_Ap_int_cmE, 2},
    {"_qfratio_Ap_int_nmE", (DL_FUNC) &_qfratio_Ap_int_nmE, 3},
    {"_qfratio_ABpq_int_cvE", (DL_FUNC) &_qfratio_ABpq_int_cvE, 4},
    {"_qfratio_ABpq_int_cmE", (DL_FUNC) &_qfratio_ABpq_int_cmE, 4},
    {"_qfratio_ABpq_int_nvE", (DL_FUNC) &_qfratio_ABpq_int_nvE, 5},
    {"_qfratio_ABpq_int_nmE", (DL_FUNC) &_qfratio_ABpq_int_nmE, 5},
    {"_qfratio_ABDpqr_int_cvE", (DL_FUNC) &_qfratio_ABDpqr_int_cvE, 6},
    {"_qfratio_ABDpqr_int_cmE", (DL_FUNC) &_qfratio_ABDpqr_int_cmE, 7},
    {"_qfratio_ABDpqr_int_nvE", (DL_FUNC) &_qfratio_ABDpqr_int_nvE, 7},
    {"_qfratio_ABDpqr_int_nmE", (DL_FUNC) &_qfratio_ABDpqr_int_nmE, 7},
    {"_qfratio_ApIq_int_cmE", (DL_FUNC) &_qfratio_ApIq_int_cmE, 3},
    {"_qfratio_ApIq_int_nmE", (DL_FUNC) &_qfratio_ApIq_int_nmE, 4},
    {"_qfratio_ApIq_npi_cvE", (DL_FUNC) &_qfratio_ApIq_npi_cvE, 6},
    {"_qfratio_ApIq_npi_nvE", (DL_FUNC) &_qfratio_ApIq_npi_nvE, 8},
    {"_qfratio_ApBq_int_cvE", (DL_FUNC) &_qfratio_ApBq_int_cvE, 7},
    {"_qfratio_ApBq_int_cmE", (DL_FUNC) &_qfratio_ApBq_int_cmE, 9},
    {"_qfratio_ApBq_int_nvE", (DL_FUNC) &_qfratio_ApBq_int_nvE, 8},
    {"_qfratio_ApBq_int_nmE", (DL_FUNC) &_qfratio_ApBq_int_nmE, 10},
    {"_qfratio_ApBq_npi_cvE", (DL_FUNC) &_qfratio_ApBq_npi_cvE, 8},
    {"_qfratio_ApBq_npi_cmE", (DL_FUNC) &_qfratio_ApBq_npi_cmE, 8},
    {"_qfratio_ApBq_npi_nvE", (DL_FUNC) &_qfratio_ApBq_npi_nvE, 9},
    {"_qfratio_ApBq_npi_nmE", (DL_FUNC) &_qfratio_ApBq_npi_nmE, 9},
    {"_qfratio_ApBIqr_int_cvE", (DL_FUNC) &_qfratio_ApBIqr_int_cvE, 8},
    {"_qfratio_ApBIqr_int_cmE", (DL_FUNC) &_qfratio_ApBIqr_int_cmE, 10},
    {"_qfratio_ApBIqr_int_nvE", (DL_FUNC) &_qfratio_ApBIqr_int_nvE, 9},
    {"_qfratio_ApBIqr_int_nmE", (DL_FUNC) &_qfratio_ApBIqr_int_nmE, 12},
    {"_qfratio_ApBIqr_npi_cvE", (DL_FUNC) &_qfratio_ApBIqr_npi_cvE, 8},
    {"_qfratio_ApBIqr_npi_cmE", (DL_FUNC) &_qfratio_ApBIqr_npi_cmE, 8},
    {"_qfratio_ApBIqr_npi_nvE", (DL_FUNC) &_qfratio_ApBIqr_npi_nvE, 9},
    {"_qfratio_ApBIqr_npi_nmE", (DL_FUNC) &_qfratio_ApBIqr_npi_nmE, 10},
    {"_qfratio_IpBDqr_gen_cvE", (DL_FUNC) &_qfratio_IpBDqr_gen_cvE, 8},
    {"_qfratio_IpBDqr_gen_cmE", (DL_FUNC) &_qfratio_IpBDqr_gen_cmE, 8},
    {"_qfratio_IpBDqr_gen_nvE", (DL_FUNC) &_qfratio_IpBDqr_gen_nvE, 9},
    {"_qfratio_IpBDqr_gen_nmE", (DL_FUNC) &_qfratio_IpBDqr_gen_nmE, 10},
    {"_qfratio_ApBDqr_int_cvE", (DL_FUNC) &_qfratio_ApBDqr_int_cvE, 9},
    {"_qfratio_ApBDqr_int_cmE", (DL_FUNC) &_qfratio_ApBDqr_int_cmE, 10},
    {"_qfratio_ApBDqr_int_nvE", (DL_FUNC) &_qfratio_ApBDqr_int_nvE, 10},
    {"_qfratio_ApBDqr_int_nmE", (DL_FUNC) &_qfratio_ApBDqr_int_nmE, 11},
    {"_qfratio_ApBDqr_npi_cvE", (DL_FUNC) &_qfratio_ApBDqr_npi_cvE, 10},
    {"_qfratio_ApBDqr_npi_cmE", (DL_FUNC) &_qfratio_ApBDqr_npi_cmE, 11},
    {"_qfratio_ApBDqr_npi_nvE", (DL_FUNC) &_qfratio_ApBDqr_npi_nvE, 11},
    {"_qfratio_ApBDqr_npi_nmE", (DL_FUNC) &_qfratio_ApBDqr_npi_nmE, 12},
    {"_qfratio_rmvnE", (DL_FUNC) &_qfratio_rmvnE, 3},
    {"_qfratio_rqfrE", (DL_FUNC) &_qfratio_rqfrE, 7},
    {"_qfratio_rqfmrE", (DL_FUNC) &_qfratio_rqfmrE, 9},
    {"_qfratio_rqfpE", (DL_FUNC) &_qfratio_rqfpE, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_qfratio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
