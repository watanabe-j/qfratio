% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/qfratio-package.R
\name{Ap_int_cmE}
\alias{Ap_int_cmE}
\alias{Ap_int_nmE}
\alias{ABpq_int_cvE}
\alias{ABpq_int_cmE}
\alias{ABpq_int_nvE}
\alias{ABpq_int_nmE}
\alias{ABDpqr_int_cvE}
\alias{ABDpqr_int_cmE}
\alias{ABDpqr_int_nvE}
\alias{ABDpqr_int_nmE}
\alias{ApIq_int_cmE}
\alias{ApIq_int_nmE}
\alias{ApIq_npi_cvE}
\alias{ApIq_npi_nvE}
\alias{ApBq_int_cvE}
\alias{ApBq_int_cmE}
\alias{ApBq_int_nvE}
\alias{ApBq_int_nmE}
\alias{ApBq_npi_cvE}
\alias{ApBq_npi_cmE}
\alias{ApBq_npi_nvE}
\alias{ApBq_npi_nmE}
\alias{ApBIqr_int_cvE}
\alias{ApBIqr_int_cmE}
\alias{ApBIqr_int_nvE}
\alias{ApBIqr_int_nmE}
\alias{ApBIqr_npi_cvE}
\alias{ApBIqr_npi_cmE}
\alias{ApBIqr_npi_nvE}
\alias{ApBIqr_npi_nmE}
\alias{IpBDqr_gen_cvE}
\alias{IpBDqr_gen_cmE}
\alias{IpBDqr_gen_nvE}
\alias{IpBDqr_gen_nmE}
\alias{ApBDqr_int_cvE}
\alias{ApBDqr_int_cmE}
\alias{ApBDqr_int_nvE}
\alias{ApBDqr_int_nmE}
\alias{ApBDqr_npi_cvE}
\alias{ApBDqr_npi_cmE}
\alias{ApBDqr_npi_nvE}
\alias{ApBDqr_npi_nmE}
\alias{ApIq_npi_nvEc}
\alias{ApBq_npi_cvEc}
\alias{ApBq_npi_cmEc}
\alias{ApBq_npi_nvEc}
\alias{ApBq_npi_nmEc}
\alias{ApBIqr_int_nvEc}
\alias{ApBIqr_int_nmEc}
\alias{ApBIqr_npi_cvEc}
\alias{ApBIqr_npi_cmEc}
\alias{ApBIqr_npi_nvEc}
\alias{ApBIqr_npi_nmEc}
\alias{IpBDqr_gen_cvEc}
\alias{IpBDqr_gen_cmEc}
\alias{IpBDqr_gen_nvEc}
\alias{IpBDqr_gen_nmEc}
\alias{ApBDqr_int_cvEc}
\alias{ApBDqr_int_cmEc}
\alias{ApBDqr_int_nvEc}
\alias{ApBDqr_int_nmEc}
\alias{ApBDqr_npi_cvEc}
\alias{ApBDqr_npi_cmEc}
\alias{ApBDqr_npi_nvEc}
\alias{ApBDqr_npi_nmEc}
\alias{ApIq_npi_nvEl}
\alias{ApBq_npi_cvEl}
\alias{ApBq_npi_cmEl}
\alias{ApBq_npi_nvEl}
\alias{ApBq_npi_nmEl}
\alias{ApBIqr_int_nvEl}
\alias{ApBIqr_int_nmEl}
\alias{ApBIqr_npi_cvEl}
\alias{ApBIqr_npi_cmEl}
\alias{ApBIqr_npi_nvEl}
\alias{ApBIqr_npi_nmEl}
\alias{IpBDqr_gen_cvEl}
\alias{IpBDqr_gen_cmEl}
\alias{IpBDqr_gen_nvEl}
\alias{IpBDqr_gen_nmEl}
\alias{ApBDqr_int_cvEl}
\alias{ApBDqr_int_cmEl}
\alias{ApBDqr_int_nvEl}
\alias{ApBDqr_int_nmEl}
\alias{ApBDqr_npi_cvEl}
\alias{ApBDqr_npi_cmEl}
\alias{ApBDqr_npi_nvEl}
\alias{ApBDqr_npi_nmEl}
\alias{rqfpE}
\alias{qfrm_cpp}
\title{Internal C++ functions}
\usage{
Ap_int_cmE(A, p = 1, thr_margin = 100)

Ap_int_nmE(A, mu, p = 1, thr_margin = 100)

ABpq_int_cvE(LA, LB, p = 1, q = 1, thr_margin = 100)

ABpq_int_cmE(A, LB, p = 1, q = 1, thr_margin = 100)

ABpq_int_nvE(LA, LB, mu, p = 1, q = 1)

ABpq_int_nmE(A, LB, mu, p = 1, q = 1)

ABDpqr_int_cvE(LA, LB, LD, p = 1, q = 1, r = 1, thr_margin = 100)

ABDpqr_int_cmE(A, LB, D, p = 1, q = 1, r = 1, thr_margin = 100)

ABDpqr_int_nvE(LA, LB, LD, mu, p = 1, q = 1, r = 1)

ABDpqr_int_nmE(A, LB, D, mu, p = 1, q = 1, r = 1)

ApIq_int_cmE(A, p = 1, q = 1, thr_margin = 100)

ApIq_int_nmE(A, mu, p = 1, q = 1, thr_margin = 100)

ApIq_npi_cvE(
  LA,
  bA,
  p = 1,
  q = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApIq_npi_nvE(
  LA,
  UA,
  bA,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBq_int_cvE(
  LA,
  LB,
  bB,
  p = 1,
  q = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApBq_int_cmE(
  A,
  LA,
  UA,
  LB,
  bB,
  p = 1,
  q = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApBq_int_nvE(
  LA,
  LB,
  bB,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApBq_int_nmE(
  A,
  LA,
  UA,
  LB,
  bB,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApBq_npi_cvE(
  LA,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBq_npi_cmE(
  A,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBq_npi_nvE(
  LA,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBq_npi_nmE(
  A,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBIqr_int_cvE(
  LA,
  LB,
  bB,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApBIqr_int_cmE(
  A,
  LA,
  UA,
  LB,
  bB,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100
)

ApBIqr_int_nvE(
  LA,
  LB,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100,
  nthreads = 1L
)

ApBIqr_int_nmE(
  A,
  LA,
  UA,
  LB,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100,
  nthreads = 0L
)

ApBIqr_npi_cvE(
  LA,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBIqr_npi_cmE(
  A,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBIqr_npi_nvE(
  LA,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBIqr_npi_nmE(
  A,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

IpBDqr_gen_cvE(
  LB,
  LD,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

IpBDqr_gen_cmE(
  LB,
  D,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

IpBDqr_gen_nvE(
  LB,
  LD,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

IpBDqr_gen_nmE(
  LB,
  D,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_int_cvE(
  LA,
  LB,
  LD,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_int_cmE(
  A,
  LB,
  D,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_int_nvE(
  LA,
  LB,
  LD,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_int_nmE(
  A,
  LB,
  D,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_npi_cvE(
  LA,
  LB,
  LD,
  bA,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_npi_cmE(
  A,
  LB,
  D,
  bA,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_npi_nvE(
  LA,
  LB,
  LD,
  bA,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_npi_nmE(
  A,
  LB,
  D,
  bA,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApIq_npi_nvEc(
  LA,
  UA,
  bA,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBq_npi_cvEc(
  LA,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBq_npi_cmEc(
  A,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBq_npi_nvEc(
  LA,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBq_npi_nmEc(
  A,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBIqr_int_nvEc(
  LA,
  LB,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100,
  nthreads = 1L
)

ApBIqr_int_nmEc(
  A,
  LA,
  UA,
  LB,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100,
  nthreads = 0L
)

ApBIqr_npi_cvEc(
  LA,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBIqr_npi_cmEc(
  A,
  LB,
  bA,
  bB,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBIqr_npi_nvEc(
  LA,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBIqr_npi_nmEc(
  A,
  LB,
  bA,
  bB,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

IpBDqr_gen_cvEc(
  LB,
  LD,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

IpBDqr_gen_cmEc(
  LB,
  D,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

IpBDqr_gen_nvEc(
  LB,
  LD,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

IpBDqr_gen_nmEc(
  LB,
  D,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_int_cvEc(
  LA,
  LB,
  LD,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_int_cmEc(
  A,
  LB,
  D,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_int_nvEc(
  LA,
  LB,
  LD,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_int_nmEc(
  A,
  LB,
  D,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_npi_cvEc(
  LA,
  LB,
  LD,
  bA,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_npi_cmEc(
  A,
  LB,
  D,
  bA,
  bB,
  bD,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApBDqr_npi_nvEc(
  LA,
  LB,
  LD,
  bA,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 1L
)

ApBDqr_npi_nmEc(
  A,
  LB,
  D,
  bA,
  bB,
  bD,
  mu,
  p = 1,
  q = 1,
  r = 1,
  m = 100L,
  thr_margin = 100,
  nthreads = 0L
)

ApIq_npi_nvEl(
  LA,
  UA,
  bA,
  mu,
  p = 1L,
  q = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBq_npi_cvEl(
  LA,
  LB,
  bA,
  bB,
  p = 1L,
  q = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBq_npi_cmEl(
  A,
  LB,
  bA,
  bB,
  p = 1L,
  q = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBq_npi_nvEl(
  LA,
  LB,
  bA,
  bB,
  mu,
  p = 1L,
  q = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBq_npi_nmEl(
  A,
  LB,
  bA,
  bB,
  mu,
  p = 1L,
  q = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBIqr_int_nvEl(
  LA,
  LB,
  bB,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100L,
  nthreads = 1L
)

ApBIqr_int_nmEl(
  A,
  LA,
  UA,
  LB,
  bB,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  error_bound = TRUE,
  thr_margin = 100L,
  nthreads = 0L
)

ApBIqr_npi_cvEl(
  LA,
  LB,
  bA,
  bB,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBIqr_npi_cmEl(
  A,
  LB,
  bA,
  bB,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBIqr_npi_nvEl(
  LA,
  LB,
  bA,
  bB,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBIqr_npi_nmEl(
  A,
  LB,
  bA,
  bB,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

IpBDqr_gen_cvEl(
  LB,
  LD,
  bB,
  bD,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

IpBDqr_gen_cmEl(
  LB,
  D,
  bB,
  bD,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

IpBDqr_gen_nvEl(
  LB,
  LD,
  bB,
  bD,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

IpBDqr_gen_nmEl(
  LB,
  D,
  bB,
  bD,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBDqr_int_cvEl(
  LA,
  LB,
  LD,
  bB,
  bD,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBDqr_int_cmEl(
  A,
  LB,
  D,
  bB,
  bD,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBDqr_int_nvEl(
  LA,
  LB,
  LD,
  bB,
  bD,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBDqr_int_nmEl(
  A,
  LB,
  D,
  bB,
  bD,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBDqr_npi_cvEl(
  LA,
  LB,
  LD,
  bA,
  bB,
  bD,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBDqr_npi_cmEl(
  A,
  LB,
  D,
  bA,
  bB,
  bD,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

ApBDqr_npi_nvEl(
  LA,
  LB,
  LD,
  bA,
  bB,
  bD,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 1L
)

ApBDqr_npi_nmEl(
  A,
  LB,
  D,
  bA,
  bB,
  bD,
  mu,
  p = 1L,
  q = 1L,
  r = 1L,
  m = 100L,
  thr_margin = 100L,
  nthreads = 0L
)

rqfpE(nit, A, B, D, p, q, r, mu, Sigma)
}
\arguments{
\item{A, B, D}{Argument matrices passed as \code{Eigen::Matrix}.
Symmetry is assumed.}

\item{p, q, r}{Exponents for \eqn{\mathbf{A}}, \eqn{\mathbf{B}}, and \eqn{\mathbf{D}}.
Passed as \code{double} or \code{long double}.}

\item{thr_margin}{Optional argument to adjust the threshold for scaling. See "Scaling"
in \code{\link{d1_i}}.}

\item{mu}{Mean vector \eqn{\bm{\mu}} for \eqn{\mathbf{x}}
passed as \code{Eigen::Array}}

\item{LA, LB, LD}{Eigenvalues of the argument matrices passed as \code{Eigen::Array}}

\item{bA, bB, bD}{Scaling coefficients for \eqn{\mathbf{A}}, \eqn{\mathbf{B}},
and \eqn{\mathbf{D}}.  Passed as \code{double} or \code{long double}.}

\item{m}{Integer to specify the order of polynomials at which the series
expression is truncated. Passed as \code{Eigen::Index}
(aka \code{std::ptrdiff_t} or \code{long long int})}

\item{error_bound}{\code{bool} to specify whether the error bound is returned}

\item{UA}{Matrix whose columns are eigenvectors of \eqn{\mathbf{A}} corresponding to
\code{LA}.  Passed as \code{Eigen::Matrix}.}

\item{nthreads}{\code{int} to specify the number of threads in \code{OpenMP}-enabled
functions.  See "Multithreading" in \code{\link{qfrm}}.}

\item{nit}{\code{int} to specify the number of iteration or sample size}

\item{Sigma}{Covariance matrix \eqn{\mathbf{\Sigma}} for \eqn{\mathbf{x}}.
Passed as \code{Eigen::Matrix}.}
}
\value{
All return a list via \code{Rcpp::List} of the following (as appropriate):
\itemize{
\item{\code{$ans}: }{Exact moment, from \code{double} or
\code{long double}}
\item{\code{$ansseq}: }{Series for the moment, from
\code{Eigen::Array}}
\item{\code{$errseq}: }{Series of errors, from \code{Eigen::Array}}
\item{\code{$twosided}: }{Logical, from \code{bool}}
\item{\code{$dimnished}: }{Logical, from \code{bool}}
}
}
\description{
These are internal \code{C++} functions called from
corresponding \code{R} functions when \code{use_cpp = TRUE}.
Direct access by the user is \strong{not} assumed.
All parameters are assumed to be appropriately structured.
}
\details{
At present, \code{ApIq_int_nmE()} calls the \code{R} function
\code{gsl::hyperg_1F1()}, so will not be much faster than
the \code{R} equivalent.
Ideally, the \code{C++} library \code{gsl} (or the like) should be used with
\code{RcppGSL}, but this is not done (commented out in the source code)
to ensure portability.

\code{rqfpE} uses \code{Rcpp::rnorm()},
which may not be particularly efficient.
}
\section{Functions}{
\itemize{
\item \code{Ap_int_cmE()}: \code{qfm_Ap_int()}, central

\item \code{Ap_int_nmE()}: \code{qfm_Ap_int()}, noncentral

\item \code{ABpq_int_cvE()}: \code{qfpm_ABpq_int()}, central & vector

\item \code{ABpq_int_cmE()}: \code{qfpm_ABpq_int()}, central & matrix

\item \code{ABpq_int_nvE()}: \code{qfpm_ABpq_int()}, noncentral & vector

\item \code{ABpq_int_nmE()}: \code{qfpm_ABpq_int()}, noncentral & matrix

\item \code{ABDpqr_int_cvE()}: \code{qfpm_ABDpqr_int()}, central & vector

\item \code{ABDpqr_int_cmE()}: \code{qfpm_ABDpqr_int()}, central & matrix

\item \code{ABDpqr_int_nvE()}: \code{qfpm_ABDpqr_int()}, noncentral & vector

\item \code{ABDpqr_int_nmE()}: \code{qfpm_ABDpqr_int()}, central & matrix

\item \code{ApIq_int_cmE()}: \code{qfrm_ApIq_int()}, central

\item \code{ApIq_int_nmE()}: \code{qfrm_ApIq_int()}, noncentral

\item \code{ApIq_npi_cvE()}: \code{qfrm_ApIq_npi()}, central

\item \code{ApIq_npi_nvE()}: \code{qfrm_ApIq_npi()}, noncentral

\item \code{ApBq_int_cvE()}: \code{qfrm_ApBq_int()}, central & vector

\item \code{ApBq_int_cmE()}: \code{qfrm_ApBq_int()}, central & matrix

\item \code{ApBq_int_nvE()}: \code{qfrm_ApBq_int()}, noncentral & vector

\item \code{ApBq_int_nmE()}: \code{qfrm_ApBq_int()}, noncentral & matrix

\item \code{ApBq_npi_cvE()}: \code{qfrm_ApBq_npi()}, central & vector

\item \code{ApBq_npi_cmE()}: \code{qfrm_ApBq_npi()}, central & matrix

\item \code{ApBq_npi_nvE()}: \code{qfrm_ApBq_npi()}, noncentral & vector

\item \code{ApBq_npi_nmE()}: \code{qfrm_ApBq_npi()}, noncentral & matrix

\item \code{ApBIqr_int_cvE()}: \code{qfmrm_ApBIqr_int()}, central & vector

\item \code{ApBIqr_int_cmE()}: \code{qfmrm_ApBIqr_int()}, central & matrix

\item \code{ApBIqr_int_nvE()}: \code{qfmrm_ApBIqr_int()}, noncentral & vector

\item \code{ApBIqr_int_nmE()}: \code{qfmrm_ApBIqr_int()}, noncentral & matrix

\item \code{ApBIqr_npi_cvE()}: \code{qfmrm_ApBIqr_npi()}, central & vector

\item \code{ApBIqr_npi_cmE()}: \code{qfmrm_ApBIqr_npi()}, central & matrix

\item \code{ApBIqr_npi_nvE()}: \code{qfmrm_ApBIqr_npi()}, noncentral & vector

\item \code{ApBIqr_npi_nmE()}: \code{qfmrm_ApBIqr_npi()}, noncentral & matrix

\item \code{IpBDqr_gen_cvE()}: \code{qfmrm_IpBDqr_gen()}, central & vector

\item \code{IpBDqr_gen_cmE()}: \code{qfmrm_IpBDqr_gen()}, central & matrix

\item \code{IpBDqr_gen_nvE()}: \code{qfmrm_IpBDqr_gen()}, noncentral & vector

\item \code{IpBDqr_gen_nmE()}: \code{qfmrm_IpBDqr_gen()}, noncentral & matrix

\item \code{ApBDqr_int_cvE()}: \code{qfmrm_ApBDqr_int()}, central & vector

\item \code{ApBDqr_int_cmE()}: \code{qfmrm_ApBDqr_int()}, central & matrix

\item \code{ApBDqr_int_nvE()}: \code{qfmrm_ApBDqr_int()}, noncentral & vector

\item \code{ApBDqr_int_nmE()}: \code{qfmrm_ApBDqr_int()}, noncentral & matrix

\item \code{ApBDqr_npi_cvE()}: \code{qfmrm_ApBDqr_npi()}, central & vector

\item \code{ApBDqr_npi_cmE()}: \code{qfmrm_ApBDqr_npi()}, central & matrix

\item \code{ApBDqr_npi_nvE()}: \code{qfmrm_ApBDqr_npi()}, noncentral & vector

\item \code{ApBDqr_npi_nmE()}: \code{qfmrm_ApBDqr_npi()}, noncentral & matrix

\item \code{ApIq_npi_nvEc()}: \code{qfrm_ApIq_npi()}, noncentral, coefficient-wise scaling

\item \code{ApBq_npi_cvEc()}: \code{qfrm_ApBq_npi()}, central & vector, coefficient-wise scaling

\item \code{ApBq_npi_cmEc()}: \code{qfrm_ApBq_npi()}, central & matrix, coefficient-wise scaling

\item \code{ApBq_npi_nvEc()}: \code{qfrm_ApBq_npi()}, noncentral & vector, coefficient-wise scaling

\item \code{ApBq_npi_nmEc()}: \code{qfrm_ApBq_npi()}, noncentral & matrix, coefficient-wise scaling

\item \code{ApBIqr_int_nvEc()}: \code{qfmrm_ApBIqr_int()}, noncentral & vector, coefficient-wise scaling

\item \code{ApBIqr_int_nmEc()}: \code{qfmrm_ApBIqr_int()}, noncentral & matrix, coefficient-wise scaling

\item \code{ApBIqr_npi_cvEc()}: \code{qfmrm_ApBIqr_npi()}, central & vector, coefficient-wise scaling

\item \code{ApBIqr_npi_cmEc()}: \code{qfmrm_ApBIqr_npi()}, central & matrix, coefficient-wise scaling

\item \code{ApBIqr_npi_nvEc()}: \code{qfmrm_ApBIqr_npi()}, noncentral & vector, coefficient-wise scaling

\item \code{ApBIqr_npi_nmEc()}: \code{qfmrm_ApBIqr_npi()}, noncentral & matrix, coefficient-wise scaling

\item \code{IpBDqr_gen_cvEc()}: \code{qfmrm_IpBDqr_gen()}, central & vector, coefficient-wise scaling

\item \code{IpBDqr_gen_cmEc()}: \code{qfmrm_IpBDqr_gen()}, central & matrix, coefficient-wise scaling

\item \code{IpBDqr_gen_nvEc()}: \code{qfmrm_IpBDqr_gen()}, noncentral & vector, coefficient-wise scaling

\item \code{IpBDqr_gen_nmEc()}: \code{qfmrm_IpBDqr_gen()}, noncentral & matrix, coefficient-wise scaling

\item \code{ApBDqr_int_cvEc()}: \code{qfmrm_ApBDqr_int()}, central & vector, coefficient-wise scaling

\item \code{ApBDqr_int_cmEc()}: \code{qfmrm_ApBDqr_int()}, central & matrix, coefficient-wise scaling

\item \code{ApBDqr_int_nvEc()}: \code{qfmrm_ApBDqr_int()}, noncentral & vector, coefficient-wise scaling

\item \code{ApBDqr_int_nmEc()}: \code{qfmrm_ApBDqr_int()}, noncentral & matrix, coefficient-wise scaling

\item \code{ApBDqr_npi_cvEc()}: \code{qfmrm_ApBDqr_npi()}, central & vector, coefficient-wise scaling

\item \code{ApBDqr_npi_cmEc()}: \code{qfmrm_ApBDqr_npi()}, central & matrix, coefficient-wise scaling

\item \code{ApBDqr_npi_nvEc()}: \code{qfmrm_ApBDqr_npi()}, noncentral & vector, coefficient-wise scaling

\item \code{ApBDqr_npi_nmEc()}: \code{qfmrm_ApBDqr_npi()}, noncentral & matrix, coefficient-wise scaling

\item \code{ApIq_npi_nvEl()}: \code{qfrm_ApIq_npi()}, noncentral

\item \code{ApBq_npi_cvEl()}: \code{qfrm_ApBq_npi()}, central & vector, long double

\item \code{ApBq_npi_cmEl()}: \code{qfrm_ApBq_npi()}, central & matrix, long double

\item \code{ApBq_npi_nvEl()}: \code{qfrm_ApBq_npi()}, noncentral & vector, long double

\item \code{ApBq_npi_nmEl()}: \code{qfrm_ApBq_npi()}, noncentral & matrix, long double

\item \code{ApBIqr_int_nvEl()}: \code{qfmrm_ApBIqr_int()}, noncentral & vector, long double

\item \code{ApBIqr_int_nmEl()}: \code{qfmrm_ApBIqr_int()}, noncentral & matrix, long double

\item \code{ApBIqr_npi_cvEl()}: \code{qfmrm_ApBIqr_npi()}, central & vector, long double

\item \code{ApBIqr_npi_cmEl()}: \code{qfmrm_ApBIqr_npi()}, central & matrix, long double

\item \code{ApBIqr_npi_nvEl()}: \code{qfmrm_ApBIqr_npi()}, noncentral & vector, long double

\item \code{ApBIqr_npi_nmEl()}: \code{qfmrm_ApBIqr_npi()}, noncentral & matrix, long double

\item \code{IpBDqr_gen_cvEl()}: \code{qfmrm_IpBDqr_gen()}, central & vector, long double

\item \code{IpBDqr_gen_cmEl()}: \code{qfmrm_IpBDqr_gen()}, central & matrix, long double

\item \code{IpBDqr_gen_nvEl()}: \code{qfmrm_IpBDqr_gen()}, noncentral & vector, long double

\item \code{IpBDqr_gen_nmEl()}: \code{qfmrm_IpBDqr_gen()}, noncentral & matrix, long double

\item \code{ApBDqr_int_cvEl()}: \code{qfmrm_ApBDqr_int()}, central & vector, long double

\item \code{ApBDqr_int_cmEl()}: \code{qfmrm_ApBDqr_int()}, central & matrix, long double

\item \code{ApBDqr_int_nvEl()}: \code{qfmrm_ApBDqr_int()}, noncentral & vector, long double

\item \code{ApBDqr_int_nmEl()}: \code{qfmrm_ApBDqr_int()}, noncentral & matrix, long double

\item \code{ApBDqr_npi_cvEl()}: \code{qfmrm_ApBDqr_npi()}, central & vector, long double

\item \code{ApBDqr_npi_cmEl()}: \code{qfmrm_ApBDqr_npi()}, central & matrix, long double

\item \code{ApBDqr_npi_nvEl()}: \code{qfmrm_ApBDqr_npi()}, noncentral & vector, long double

\item \code{ApBDqr_npi_nmEl()}: \code{qfmrm_ApBDqr_npi()}, noncentral & matrix, long double

\item \code{rqfpE()}: \code{rqfp()}

}}
